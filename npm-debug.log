0 info it worked if it ends with ok
1 verbose cli [ '/usr/local/bin/node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.14.12
3 info using node@v4.2.6
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec Result {
7 silly cache add   raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/timofeybiryukov/Desktop/express-js-controller-param-injector',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package.tgz',
9 verbose tar pack   '/Users/timofeybiryukov/Desktop/express-js-controller-param-injector' ]
10 verbose tarball /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package.tgz
11 verbose folder /Users/timofeybiryukov/Desktop/express-js-controller-param-injector
12 info prepublish express-param-injector@1.0.3
13 verbose addLocalTarball adding from inside cache /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package.tgz
14 silly cache afterAdd express-param-injector@1.0.3
15 verbose afterAdd /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package/package.json not in flight; writing
16 verbose afterAdd /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package/package.json written
17 silly publish { name: 'express-param-injector',
17 silly publish   version: '1.0.3',
17 silly publish   description: 'Parameters injection from arguments for express.js route functions',
17 silly publish   main: 'index.js',
17 silly publish   dependencies: {},
17 silly publish   devDependencies: { 'body-parser': '^1.15.0', express: '^4.13.4' },
17 silly publish   scripts: { test: 'node test' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/TimofeyBiryukov/express-param-injector.git' },
17 silly publish   author: { name: 'Timofey Biryukov', email: 'timofeybiryukov@gmail.com' },
17 silly publish   keywords: [ 'express', 'injection', 'parameters' ],
17 silly publish   homepage: 'https://github.com/TimofeyBiryukov/express-param-injector',
17 silly publish   readme: '\n\n# Express.js Params Injector\n\n![doc image](./doc.png)\n\nHow often your express.js route or controller function starts out like this?\n\n    app.get(\'/calculateAge\', function(req, res, next) {\n      var id = req.query[\'id\'];\n      var name = req.body[\'name\'];\n      var birthYear = req.body[\'birthYear\'];\n       \n      // do what ever ...\n      res.end();\n    });\n\nRequest:\n\n    POST /calculateAge?id=1\n    \n    {\n        "name": "Tim",\n        "birthYear": 1993\n    }\n\nIn my experience that happens all the time. Now, wouldn\'t it be nice if you can write parameters you want as a function arguments instead of req, res objects and then start extracting them. If any request is changed, remembering to change you route function to represent new arguments.\nThat is what I thought to my self and wrote this micro lib. I was inspired by AngularJS dependency injection approach and used same concepts here. With this lib route function can look like this:\n\n    app.get(\'/calculateAge\', Injector.IC(function(id, name, birthYear) {\n        // do what ever ...\n        this.res.end();\n    }));\n    \nSee Usage section for more examples.\n\n# Installation\n\nIn console:\n\n    npm install express-param-injector\n  \nIn code:\n\n    require(\'express-param-injector\');\n  \n  \n# Usage\n\nStart your express application, require express-param-injector and wrap your route function in Injector.IC method.\nThen you can write any parameters names that you want to be injected as function arguments and Injector will look for them and inject them in to the function.\n\n    var app = require(\'express\')();\n    var Injector = require(\'express-param-injector\');\n  \n    app.listen(1334);\n  \n    app.get(\'/calculateAge\', Injector.IC(function(name, birthYear, res) {\n      var currentYear = new Date().getFullYear();\n      var countedAge = currentYear - birthYear;\n      res.end(name + \' is \' + countedAge + \' years old\');\n    }));\n  \nCloser look:\n\n    Injector.IC(function(firstParam, req, res, anotherParam, next, lastParam) {\n      // firstParam, anotherParam, lastParam - parameter in query, params or body (bodyParser), param injection\n      // req - express.js request object, smart injection\n      // res - express.js response object, smart injection\n      // name - parameter in query, params or body (bodyParser), param injection\n      // next - express.js callback function for middleware, smart injection\n    \n      // and order does not matter!\n    });\n\nThis can be applied to any callback express function that expects req, res to be first two params, and next callback will work as well:\n\n    app.use(Injector.IC(function(id, next) {\n      // check id here\n      next();\n    }));\n\n`Request`, `response` and `next` alternatively can be accessed through `this` inside route function:\n\n    app.post(\'/add\', Injector.IC(function(a, b) {\n      var result = a + b;\n      this.res.end(result);  \n    }));\n \n In case you have to have a specific `this` inside your route you can pass a scope function as a last parameter to Injector.IC:\n \n (If there is a need to still refer to Injector `self` param key can be used)\n \n       /** @constructor */\n       function Constructor() {}\n   \n       Constructor.prototype.checkId = function(id) {\n         return id.toString() === (1234).toString();\n       };\n   \n   \n       var myConstructor = new Constructor();\n       \n       app.get(\'/checkId\', Injector.IC(function(id, res, self) {\n          // this is now `myConstructor`\n          // but self.req and self.res are now avalible \n          \n         if (this.checkId(id)) {\n           res.status(200);\n         } else {\n           res.status(400);\n         }\n         res.end();\n       }, myConstructor)));\n \n Client can pass parameters in URL string or body with express.js body parser, parameters will be found and injected in following order:\n \n 1. request.query;\n 2. request.params;\n 3. request.body; // if exists\n \n### Have a nice day :)\n\n\n \n \n ',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'bff3f9c3a84b7373d8ae0fba3bd49da1cdc6f3fa',
17 silly publish   bugs: { url: 'https://github.com/TimofeyBiryukov/express-param-injector/issues' },
17 silly publish   _id: 'express-param-injector@1.0.3',
17 silly publish   _shasum: 'a745eefcd6f690e3555c7ce42e1623bdbea013f9',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name express-param-injector
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry http://registry.npmjs.org/
22 silly mapToRegistry uri http://registry.npmjs.org/express-param-injector
23 verbose publish registryBase http://registry.npmjs.org/
24 silly publish uploading /Users/timofeybiryukov/.npm/express-param-injector/1.0.3/package.tgz
25 verbose request uri http://registry.npmjs.org/express-param-injector
26 verbose request sending authorization for write operation
27 info attempt registry request try #1 at 5:17:10 PM
28 verbose request using bearer token for auth
29 verbose request id 0d3f9505890b2cd2
30 http request PUT http://registry.npmjs.org/express-param-injector
31 http 403 http://registry.npmjs.org/express-param-injector
32 verbose headers { 'content-type': 'application/json',
32 verbose headers   'cache-control': 'max-age=300',
32 verbose headers   'content-length': '95',
32 verbose headers   'accept-ranges': 'bytes',
32 verbose headers   date: 'Sun, 14 Feb 2016 11:17:15 GMT',
32 verbose headers   via: '1.1 varnish',
32 verbose headers   connection: 'keep-alive',
32 verbose headers   'x-served-by': 'cache-ams4122-AMS',
32 verbose headers   'x-cache': 'MISS',
32 verbose headers   'x-cache-hits': '0',
32 verbose headers   'x-timer': 'S1455448630.742202,VS0,VE4584' }
33 verbose request invalidating /Users/timofeybiryukov/.npm/registry.npmjs.org/express-param-injector on PUT
34 error publish Failed PUT 403
35 verbose stack Error: "You cannot publish over the previously published version 1.0.3." : express-param-injector
35 verbose stack     at makeError (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:264:12)
35 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:252:14)
35 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:172:14)
35 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:198:22)
35 verbose stack     at emitTwo (events.js:87:13)
35 verbose stack     at Request.emit (events.js:172:7)
35 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1082:10)
35 verbose stack     at emitOne (events.js:82:20)
35 verbose stack     at Request.emit (events.js:169:7)
35 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1009:12)
36 verbose statusCode 403
37 verbose pkgid express-param-injector
38 verbose cwd /Users/timofeybiryukov/Desktop/express-js-controller-param-injector
39 error Darwin 15.3.0
40 error argv "/usr/local/bin/node" "/usr/local/bin/npm" "publish"
41 error node v4.2.6
42 error npm  v2.14.12
43 error code E403
44 error "You cannot publish over the previously published version 1.0.3." : express-param-injector
45 error If you need help, you may report this error at:
45 error     <https://github.com/npm/npm/issues>
46 verbose exit [ 1, true ]
